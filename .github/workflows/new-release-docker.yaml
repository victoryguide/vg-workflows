name: Create new release for docker repo

on:
  workflow_call:
    inputs:
      branch:
        description: "The branch to create a release from"
        required: false
        default: "main"
        type: string
      version-tag-prefix:
        description: "The prefix to use for the new tag"
        required: false
        default: "v"
        type: string
      build-args:
        description: |
          List of build-time variables (https://github.com/docker/build-push-action#inputs).
          Use BUILD_ARG_SECRET_X with single bracket to use secrets, for example:
            with:
              build-args: |
                --build-arg SECRET_TOKEN="${ secrets.BUILD_ARG_SECRET_1 }"
            secrets:
              BUILD_ARG_SECRET_1: $[double bracket] secrets.SECRET_TOKEN [double_bracet]
        required: false
        type: string
    secrets:
      BUILD_ARG_SECRET_1:
        required: false
      BUILD_ARG_SECRET_2:
        required: false
      BUILD_ARG_SECRET_3:
        required: false
      BUILD_ARG_SECRET_4:
        required: false
      BUILD_ARG_SECRET_5:
        required: false
      BUILD_ARG_SECRET_6:
        required: false
      BUILD_ARG_SECRET_7:
        required: false
      BUILD_ARG_SECRET_8:
        required: false
      BUILD_ARG_SECRET_9:
        required: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write

jobs:
  build-and-publish-new-release:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.version-info.outputs.new_tag }}
      new_version: ${{ steps.version-info.outputs.new_version }}
      release_type: ${{ steps.version-info.outputs.release_type }}
      changelog: ${{ steps.version-info.outputs.changelog }}
      images_matrix: ${{ steps.detect-docker-images.outputs.matrix }}

    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ inputs.branch }}

      - name: Get new version information
        id: version-info
        uses: mathieudutour/github-tag-action@v5.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: ${{ inputs.branch }}
          tag_prefix: ${{ inputs.version-tag-prefix }}
          dry_run: true

      - name: Detect Docker images to build
        id: detect-docker-images
        shell: bash
        run: |
          set -euo pipefail

          # Build a JSON matrix of images to build
          matrix="[]"
          if [ -d "./docker" ]; then
            # Iterate subdirectories in ./docker that contain a Dockerfile
            while IFS= read -r -d '' dir; do
              name="$(basename "${dir}")"
              dockerfile="${dir}/Dockerfile"
              if [ -f "$dockerfile" ]; then
                obj=$(jq -n --arg context "." \
                           --arg dockerfile "$dockerfile" \
                           --arg suffix "-$name" '{context: $context, dockerfile: $dockerfile, suffix: $suffix}')
                matrix=$(jq -c --argjson obj "$obj" '. + [$obj]' <<<"$matrix")
              fi
            done < <(find ./docker -mindepth 1 -maxdepth 1 -type d -print0)
          fi

          # Fallback to building repo root if no docker subfolders with Dockerfile were found
          if [ "$(jq length <<<"$matrix")" -eq 0 ]; then
            obj=$(jq -n --arg context "." --arg dockerfile "./Dockerfile" --arg suffix "" '{context: $context, dockerfile: $dockerfile, suffix: $suffix}')
            matrix=$(jq -c --argjson obj "$obj" '. + [$obj]' <<<"$matrix")
          fi

          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

  build-and-push-docker-images:
    runs-on: ubuntu-latest
    needs: build-and-publish-new-release
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.build-and-publish-new-release.outputs.images_matrix) }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ inputs.branch }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Replace placeholder secrets in build-args with real values
        id: build-args-with-secrets
        run: |
          build_args="$BUILD_ARGS"
          for key in `echo $SECRETS_CONTEXT | jq -r 'keys | @sh' | sed "s/'//g"`
          do
            value=`echo $SECRETS_CONTEXT | jq -r ".${key}"`;
            build_args=$(echo "$build_args" | sed "s#\${ secrets.${key} }#${value}#g");
          done
          {
            echo "build-args<<EOF"
            echo "$build_args"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
        env:
          BUILD_ARGS: ${{ inputs.build-args }}
          SECRETS_CONTEXT: ${{ toJson(secrets) }}

      - name: Build and push Docker image ${{ matrix.image.suffix }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.image.context }}
          file: ${{ matrix.image.dockerfile }}
          push: true
          build-args: |
            VERSION="${{ needs.build-and-publish-new-release.outputs.new_version }}"
            ${{ steps.build-args-with-secrets.outputs.build-args }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.image.suffix }}:${{ needs.build-and-publish-new-release.outputs.new_version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.image.suffix }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    runs-on: ubuntu-latest
    needs:
      - build-and-publish-new-release
      - build-and-push-docker-images
    steps:
      - name: Create a GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build-and-publish-new-release.outputs.new_tag }}
          release_name: Release ${{ needs.build-and-publish-new-release.outputs.new_tag }}
          body: ${{ needs.build-and-publish-new-release.outputs.changelog }}
